<?xml version="1.0" encoding="UTF-8"?>

<!--
  Maven project configuration file
  http://maven.apache.org/

  For building this project: mvn package
-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.osgeo</groupId>
  <artifactId>proj</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>PROJ bindings</name>
  <url>https://github.com/OSGeo/PROJ-JNI</url>
  <description>
    Java Native Interface for the PROJ C/C++ library.
    PROJ is a generic coordinate transformation software that transforms
    geospatial coordinates from one coordinate reference system (CRS) to another.
    This includes cartographic projections as well as geodetic transformations.
    This package exposes PROJ services as implementations of GeoAPI interfaces.
    Both PROJ and GeoAPI are modeled according the ISO 19111 international standard.
  </description>

  <organization>
    <name>Open Source Geospatial Foundation</name>
    <url>https://www.osgeo.org/</url>
  </organization>

  <licenses>
    <license>
      <name>MIT</name>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:https://github.com/OSGeo/PROJ-JNI</connection>
    <url>https://github.com/OSGeo/PROJ-JNI</url>
  </scm>

  <developers>
    <developer>
      <id>kbevers</id>
      <name>Kristian Evers</name>
      <email>kristianevers@gmail.com</email>
      <organization>Open Source Geospatial Foundation</organization>
      <organizationUrl>https://www.osgeo.org</organizationUrl>
      <roles>
        <role>C/C++ developer</role>
      </roles>
      <timezone>+1</timezone>
    </developer>
    <developer>
      <id>desruisseaux</id>
      <name>Martin Desruisseaux</name>
      <email>martin.desruisseaux@geomatys.com</email>
      <organization>Geomatys</organization>
      <organizationUrl>https://www.geomatys.com</organizationUrl>
      <roles>
        <role>Java developer</role>
      </roles>
      <timezone>+1</timezone>
    </developer>
  </developers>

  <dependencies>
    <dependency>
      <groupId>org.opengis</groupId>
      <artifactId>geoapi</artifactId>
      <version>3.0.2</version>
    </dependency>
    <dependency>
      <groupId>org.opengis</groupId>
      <artifactId>geoapi-conformance</artifactId>
      <version>3.0.2</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>enforce</id>
            <configuration>
              <rules>
                <requireJavaVersion>
                  <version>11</version>
                </requireJavaVersion>
                <dependencyConvergence/>
              </rules>
            </configuration>
            <goals>
              <goal>enforce</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Compilation: target Java 8, enable all warnings. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.10.1</version>
        <configuration>
          <release>8</release>
          <showWarnings>true</showWarnings>
          <showDeprecation>true</showDeprecation>
          <useIncrementalCompilation>false</useIncrementalCompilation>
          <compilerArgs>
            <arg>-h</arg> <arg>${project.build.sourceDirectory}/../cpp</arg>
          </compilerArgs>
        </configuration>
      </plugin>

      <!-- Test execution. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M7</version>
        <configuration>
          <systemPropertyVariables>
            <java.util.logging.config.file>${project.basedir}/src/config/logging.properties</java.util.logging.config.file>
          </systemPropertyVariables>
          <argLine>-Xcheck:jni</argLine>
          <trimStackTrace>false</trimStackTrace>
        </configuration>
      </plugin>

      <!-- JAR packaging: add project name and version in MANIFEST.MF file. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <archive>
            <addMavenDescriptor>false</addMavenDescriptor>
            <manifest>
              <addClasspath>true</addClasspath>
              <classpathLayoutType>simple</classpathLayoutType>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
          </archive>
        </configuration>
      </plugin>

      <!--
        Compile C/C++ code using CMake. Configuration will be written in `target/cmake` and will not
        be redone, unless that directory is deleted. The compiled native file will be written in the
       `classes/org/…/proj/` directory for inclusion in the JAR file and will not be rebuilt, unless
        that file is deleted. Symbolik links to binaries will be created in the `target` directory.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <phase>prepare-package</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <mkdir dir        = "${project.build.directory}/classes/META-INF/versions/9"/>
                <javac destdir    = "${project.build.directory}/classes/META-INF/versions/9"
                       srcdir     = "${project.basedir}/src/main/java9"
                       modulepath = "${javax.measure:unit-api:jar}:${org.opengis:geoapi:jar}"
                       release    = "9"
                       includeAntRuntime = "false">
                  <compilerarg line = "--patch-module org.osgeo.proj=${project.build.directory}/classes"/>
                </javac>
              </target>
            </configuration>
          </execution>
          <execution>
            <id>build-native</id>
            <phase>process-classes</phase>
            <goals><goal>run</goal></goals>
            <configuration>
              <target>
                <property name="source.directory" value="${project.basedir}/src/main/cpp"/>
                <property name="target.directory" value="${project.build.directory}"/>
                <property name=    "cmake.subdir" value="cmake"/>
                <ant dir="${target.directory}" antfile="${project.basedir}/src/main/cpp/build.xml" inheritAll="true"/>
              </target>
            </configuration>
          </execution>
          <execution>
            <id>build-tests</id>
            <phase>process-test-classes</phase>
            <goals><goal>run</goal></goals>
            <configuration>
              <target>
                <!--
                  "Copy" the native binary among test classes because `Class.getResource(…)` searches in the directory
                  of `module-info.class`, which is overwritten in `test-classes`. This is needed for running the tests.
                -->
                <first id="native-binary"><fileset dir="${project.build.directory}/classes/org/osgeo/proj" includes="*-binding.*"/></first>
                <basename property="native-binary-filename" file="${toString:native-binary}"/>
                <symlink overwrite="true" resource="${toString:native-binary}"
                         link="${project.build.directory}/test-classes/org/osgeo/proj/${native-binary-filename}"/>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- JavaDoc configuration. -->
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.4.1</version>
        <configuration>
          <excludePackageNames>org.osgeo.proj.spi</excludePackageNames>
          <encoding>${project.build.sourceEncoding}</encoding>
          <docencoding>${project.build.sourceEncoding}</docencoding>
          <charset>${project.build.sourceEncoding}</charset>
          <author>false</author>
          <version>false</version>
          <noqualifier>all</noqualifier>
          <quiet>true</quiet>
          <keywords>true</keywords>
          <breakiterator>true</breakiterator>
          <validateLinks>true</validateLinks>
          <detectJavaApiLink>false</detectJavaApiLink>
          <links>
            <link>https://docs.oracle.com/en/java/javase/13/docs/api</link>
            <link>https://www.geoapi.org/3.0/javadoc</link>
          </links>
          <additionalOptions>
            <additionalOption>--add-stylesheet "${project.basedir}/src/main/javadoc/customization.css"</additionalOption>
          </additionalOptions>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
