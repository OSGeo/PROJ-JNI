/*
 * Copyright © 2019-2021 Agency for Data Supply and Efficiency
 * Copyright © 2021 Open Source Geospatial Foundation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.osgeo.proj;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import org.junit.Test;

import static org.junit.Assert.*;


/**
 * Generate a C++ file that can be used for comparing the Java enumeration values
 * against the C++ values.
 *
 * @author  Martin Desruisseaux (Geomatys)
 * @version 1.0
 * @since   1.0
 */
public final strictfp class EnumerationValueTest {
    /**
     * The content of the C++ file.
     */
    private final List<String> lines;

    /**
     * Name of the class containing the enumeration values to be added by
     * {@link #addStaticAssert(String, Enum[])}.
     */
    private String parent;

    /**
     * Creates a new verifier.
     */
    public EnumerationValueTest() {
        lines = new ArrayList<>(30);
    }

    /**
     * Generates the {@code static_assert} instructions.
     */
    private void generate() {
        lines.add("// DO NOT EDIT THIS FILE - it is machine generated.");
        lines.add("// See org.osgeo.proj.EnumerationValueTest.");
        lines.add("");
        lines.add("#include \"proj/coordinateoperation.hpp\"");
        lines.add("");
        lines.add("using osgeo::proj::util::IComparable;");
        lines.add("using osgeo::proj::common::UnitOfMeasure;");
        lines.add("using osgeo::proj::operation::ParameterValue;");
        lines.add("using osgeo::proj::operation::CoordinateOperationContext;");
        lines.add("");
        lines.add("");
        lines.add("// Verify that Java ordinal values are the same than C++ enumeration values.");

        parent = "UnitOfMeasure";
        addStaticAssert("Type", UnitType.values());

        parent = "ParameterValue";
        addStaticAssert("Type", ParameterType.values());

        parent = "IComparable";
        addStaticAssert("Criterion", ComparisonCriterion.values());

        parent = "CoordinateOperationContext";
        addStaticAssert("SourceTargetCRSExtentUse", SourceTargetCRSExtentUse.values());
        addStaticAssert("SpatialCriterion",         SpatialCriterion.values());
        addStaticAssert("GridAvailabilityUse",      GridAvailabilityUse.values());
        addStaticAssert("IntermediateCRSUse",       IntermediateCRSUse.values());
    }

    /**
     * Adds the {@code "static_assert"} instructions for the given enumeration.
     *
     * @param name    C++ name of the enumeration.
     * @param values  enumeration values.
     */
    private void addStaticAssert(final String name, final Enum<?>[] values) {
        final StringBuilder line = new StringBuilder(200)
                .append("static_assert(static_cast<int>(").append(parent).append("::").append(name).append("::");
        final int base = line.length();
        for (final Enum<?> e : values) {
            if (!CoordinateOperationContext.DEFAULT.equals(e.name())) {
                line.setLength(base);
                line.append(e.name()).append(") == ").append(e.ordinal())
                    .append(", \"Unexpected value for ").append(e).append("\");");
                lines.add(line.toString());
            }
        }
    }

    /**
     * Regenerates the {@code assertions.cpp} file if its content changed.
     *
     * @throws IOException if an error occurred while reading or writing.
     */
    @Test
    public void compare() throws IOException {
        final Path file = Paths.get("src/main/cpp/assertions.cpp");
        assertTrue("assertions.cpp file not found.", Files.isRegularFile(file));
        final List<String> current = Files.readAllLines(file);
        generate();
        if (!current.equals(lines)) {
            Files.write(file, lines);
            fail("The content of assertions.cpp file changed. C++ code needs to be recompiled.");
        }
    }
}
